{
  "hash": "65c75ca728397bca95e91c184724199f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with LLM AI inside RStudio, part 1\"\nauthor: John Yuill\ndate: '2024-08-25'\ncategories: [analysis]\ndescription-meta: Exploring options for integrating LLMs into RStudio workflows.\ndraft: true\nimage:  dalle2-2024-08-26-llm-data-analysis_sm2.png\ntoc: true\ntoc-depth: 3\ntoc-location: left\ndate-modified: '2025-04-06'\nexecute:\n  echo: true\n  error: false\n  warning: false\n---\n\n\n\n\n## Large Language Model AI Tools in R Studio\n\nPart 1 of exploring integration of LLM tools into R Studio for more efficient data analysis and faster speed to insights.\n\nLooking at some of the more well-known options, with relatively simple examples that give an idea of some, but by no means all, of the capabilities.\n\n1.  GitHub Copilot\n2.  chattr package\n3.  gptstudio package\n\n### First, some data\n\nHere's the data set we'll use throughout these examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(here('data','lmr-data.csv'), show_col_types = FALSE)\nglimpse(data, width=80)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,699\nColumns: 14\n$ lmr_id       <dbl> 17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 8…\n$ fy_qtr       <chr> \"FY2016Q1\", \"FY2016Q1\", \"FY2016Q1\", \"FY2016Q1\", \"FY2016Q1…\n$ cat_type     <chr> \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"…\n$ category     <chr> \"Domestic - BC Beer\", \"Domestic - BC Beer\", \"Domestic - B…\n$ subcategory  <chr> \"Domestic - BC Commercial Beer\", \"Domestic - BC Micro Bre…\n$ netsales     <dbl> 173628845, 16988008, 32389411, 15818440, 169352, 2801993,…\n$ litres       <dbl> 52236010, 3927908, 9094263, 4378195, 25073, 862782, 38289…\n$ fyr          <dbl> 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 201…\n$ qtr          <chr> \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1…\n$ end_qtr      <chr> \"06-30\", \"06-30\", \"06-30\", \"06-30\", \"06-30\", \"06-30\", \"06…\n$ end_qtr_dt   <date> 2015-06-30, 2015-06-30, 2015-06-30, 2015-06-30, 2015-06-…\n$ cyr          <dbl> 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ season       <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"summer…\n$ start_qtr_dt <date> 2015-06-01, 2015-06-01, 2015-06-01, 2015-06-01, 2015-06-…\n```\n\n\n:::\n:::\n\n\n### Github Copilot\n\nCopilot is pretty much a must-have to help with your coding, imo. That is, of course, as long as you're willing to pay for it, since it **requires a Copilot subscription**.\n\nPosit has a [GitHub Copilot guide](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html) that gives you pretty much everything you need to get going.\n\n-   easy integratiion with RStudio via **Tools \\> Global Options**.\n-   real-time code suggestions -\\> way beyond traditional autocomplete offers.\n-   suggestions can even provide good practices for coding efficiency or other techniques that you may not be aware of.\n-   doesn't work well in 'Visual' mode, so you'll need to switch to 'Source' mode to get the most out of it.\n\n![](github-copilot-r-settings.png){fig-align=\"center\" width=\"400\"}\n\nMost folks are probably pretty familiar with how Copilot works, and there are lots of great resources, so I'll just throw in a simple R-specific example here.\n\n#### Prompt/response #1:\n\n-   After loading the data, the comment specifies what we want to do next.\n-   I started typing 'data\\_' and the greyed-out code was supplied by Copilot.\n-   To accept, I just hit 'tab' and execute.\n\n![](copilot_01.png)\n\nResulting in a serviceable chart:\n\n![](copilot_01_chart.png){width=\"300\"}\n\n#### Prompt/response #2:\n\n-   Going for some refinement: this time, I type in more detailed intentions, and Copilot provides all the greyed-out code, without me typing any code at all:\n\n![](copilot_02.png)\n\nResult looks good - although 'removal of x-axis ticks' got missed:\n\n![](copilot_02_chart.png){width=\"300\"}\n\n#### Prompt/response #3:\n\n-   One more set of minor refinements, these get incorporated in for a complete set of code to deliver the intended result\n\n![](copilot_03.png)\n\nResult:\n\n![](copilot_03_chart.png){width=\"300\"}\n\nA basic example, but shows the power of having this assistant at hand. Also highlights the way **these tools are particularly helpful to less-experienced programmers**: an experienced pro would be able to do all this as fast as Copilot but this really helps to level-up those who know what they want to do, but don't have all the code nuances at their fingertips.\n\n### chattr\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(chattr)\n```\n:::\n\n\n[chattr](https://mlverse.github.io/chattr/) is a package that enables interacting with LLMs from within the RStudio environment. The intention is to go well beyond the code-focused content of Copilot.\n\nOnce you install and load the package, you can use the `chattr` function to interact with the LLM. The `chattr_use` function provides the ability to choose the model to use: *(options may vary over time)*\n\n![](chattr_models.png){width=\"350\"}\n\nThe choice of model will effect the quality and form of output that you get. Most examples below were done with gpt-4 - you may see very different results.\n\nAfter you've made a selection, you can test your connection and confirm which model you are using with `chattr_test` function:\n\n![](chattr_test.png){width=\"400\"}\n\nIf you don't have a successful test, best to go to the [chattr Github documentation](https://mlverse.github.io/chattr/) for advice.\n\nThere are a couple of ways to interact with chattr:\n\n1.  use '**chattr(prompt = \"**\\<prompt here\\>**\")**' inline, directly in a code block to generate code.\n\n2.  use **Addins \\> CHATTR \\> Open Chat** to open an app in the Viewer window, where you can interact through an interface.\n\n#### Inline chattr\n\nWorks best if you want to interact from a Quarto or RMarkdown doc, since you add prompts to your code chunks and get the code built out there for use.\n\n1.  enter **chattr(prompt = \"\\<prompt here\\>\")** in your code block - works from Visual mode in Quarto (unlike Copilot).\n2.  move the cursor to somewhere BELOW the prompt text.\n3.  Without having access to your actual dataset, I can't provide the exact code. However, I can provide a general approach using the tidyverse andrun the code block to generate the code to answer your question.\n4.  to get the actual results, comment out the original chattr prompt (only need one '\\#' before 'chattr') and run the new code provided.\n5.  fix as necessary\n\n##### Prompt #1:\n\nA basic question along the lines of what we were doing with Copilot (maybe slightly more advanced). Produces basic chart that answers the question. (prompt in commented out in order to show the results from the R code that was provided)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#chattr(prompt = \"for the data dataframe I have in my session, how can i show the trend in netsales for cat_type 'Beer' by cyr from 2016 to 2022?\")\n\n# Load the required libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Filter the data for cat_type 'Beer' and years 2016 to 2022\ndata_beer <- data %>% \n  filter(cat_type == 'Beer' & cyr >= 2016 & cyr <= 2022)\n\n# Summarize the data to get total net sales by cyr\ndata_summarized <- data_beer %>% \n  group_by(cyr) %>% \n  summarise(total_netsales = sum(netsales))\n\n# Create the line chart\nggplot(data_summarized, aes(x = cyr, y = total_netsales)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/chattr_01-1.png){width=672}\n:::\n:::\n\n\n##### Prompt #2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#chattr(\"what is the highest year of total_netsales for Beer?\")\n\n# Load the required libraries\nlibrary(dplyr)\nlibrary(tidymodels)\n\n# Filter the data for cat_type 'Beer'\ndata_beer <- data %>% \n  filter(cat_type == 'Beer')\n\n# Summarize the data to get total net sales by cyr\ndata_summarized <- data_beer %>% \n  group_by(cyr) %>% \n  summarise(total_netsales = sum(netsales))\n\n# Find the year with the highest total_netsales\nhighest_year <- data_summarized %>% \n  filter(total_netsales == max(total_netsales)) %>% \n  pull(cyr)\n```\n:::\n\n\nNote that for this one, the value in stored in a variable in your session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(highest_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2018\n```\n\n\n:::\n:::\n\n\n##### Prompt #3:\n\nA little more complex example, where I have included some hints. Close but some problems...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# commented out to keep the prompt but not re-run:\n#chattr(prompt = \"what was the total percentage change in total net sales for Beer over the period 2016 to 2022, and what year had the largest year-over-year percentage change, either positive or negative? my data set is called data_beer, Beer is in cat_type variable, year is in cyr variable, and sales are in netsales variable.\")\n```\n:::\n\n\n![](chattr_prompt_03_output2_err.png)\n\nWorks with minor modifications:\n\n-   set separate lines for loading libraries and add ')'\n-   add '\\#' to one of the comment lines\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the libraries\nlibrary(tidyverse)\nlibrary(tidymodels)\n\n# Filter the data for the years 2016 to 2022 and for the category type 'Beer'\ndata_beer_filtered <- data_beer %>%\n  filter(cyr >= 2016 & cyr <= 2022 & cat_type == 'Beer')\n\n# Calculate the total net sales for each year\ntotal_sales_per_year <- data_beer_filtered %>%\n  group_by(cyr) %>%\n  summarise(total_netsales = sum(netsales))\n\n# Calculate the percentage change in total net sales for each year\ntotal_sales_per_year <- total_sales_per_year %>%\n  mutate(percentage_change = (total_netsales/lag(total_netsales) - 1) * 100)\n\n# Calculate the total percentage change in total net sales over the period2016 to 2022\ntotal_percentage_change <- (total_sales_per_year$total_netsales[nrow(total_sales_per_year)] / total_sales_per_year$total_netsales[1] - 1) * 100\n\n# Find the year with the largest year-over-year percentage\nyear_largest_change <- total_sales_per_year %>%\n  filter(percentage_change == max(percentage_change, na.rm = TRUE)) %>%\n  pull(cyr)\n\n# Print the total percentage change and year with the largest change\ntotal_percentage_change\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.1579791\n```\n\n\n:::\n\n```{.r .cell-code}\nyear_largest_change\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2017\n```\n\n\n:::\n:::\n\n\nThis is pretty minor fix, and a fairly small price to pay for a LOT of free code. But does highlight that **these tools aren't perfect** (surprise, surprise!).\n\n#### Addin \\[not working\\]\n\n(Addin not working last time it was tried - Apr 2025)\n\n![](addin-chattr.png){width=\"100\"}\n\nThe main selling point for chattr is intended to be the **interactive app accessed via the Viewer window**. You can access this through **Addins \\> CHATTR \\>** '**Open Chat**' option.\n\nWith this approach, you can get more running conversation and can copy/paste code as needed into your R file. It is text-based only, so no matter what model you are using, you can't upload files for analysis or have direction interaction between the data in your R session and the LLM.\n\nOverall, maybe keeps things cleaner and is more flexible than accessing in-line, although:\n\n-   a\\) you have to jump back and forth to some degree (although having the Viewer window available helps),\n-   b\\) you don't have a built-in reference for future (if needed),\n-   c\\) you can't interact with your console or run any code while the app is running - it is a Shiny app, so the normal situation applies.\n\n##### Prompt 4 (via chat window):\n\nHere's the results using the same prompt as above. As you can see, very similar results, in this case with the prompt below and then the text + code provided.\n\n![](chattr_prompt_viewer.png){width=\"800\"}\n\nOne advantage over something like Copilot is that you have access to a LOT more information that you can use to answer broader questions, beyond just code, that can help with your analysis.\n\n\\[provide screenshot from more sophisticated conversation with Viewer window\\]\n\ncode provided by prompt below - fails on calculating subcategory change: all NA\n\n![](chattr_viewer_prompt.png){width=\"300\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate annual total revenue for each subcategory\nannual_revenue <- data_beer %>%\n  group_by(cyr, subcategory) %>%\n  summarise(netsales = sum(netsales, na.rm = TRUE))\n\n# Calculate annual total revenue change for each subcategory\nannual_revenue_change <- annual_revenue %>%\n  arrange(cyr, subcategory) %>%\n  group_by(subcategory) %>%\n  mutate(revenue_change = netsales - lag(netsales))\n\n# View the data\nhead(annual_revenue_change)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n# Groups:   subcategory [6]\n    cyr subcategory                                netsales revenue_change\n  <dbl> <chr>                                         <dbl>          <dbl>\n1  2015 Asia And South Pacific Beer                 5380425             NA\n2  2015 Domestic - BC Commercial Beer             486328170             NA\n3  2015 Domestic - BC Micro Brew Beer              57536956             NA\n4  2015 Domestic - BC Regional Beer                98691340             NA\n5  2015 Domestic - Other Province Commercial Beer  42829824             NA\n6  2015 Domestic - Other Province Micro Brew Beer    563027             NA\n```\n\n\n:::\n:::\n\n\n### gptstudio\n\nMAY MOVE THIS TO SEPARATE ARTICLE PART II\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(gptstudio)\n```\n:::\n\n\n#### Addin\n\n![](gptstudio_addin.png){width=\"200\"}\n\n-   real-time prompting in Viewer pane with text responses\n-   provides code suggestions based on prompts that you can then copy/paste into your R file\n-   doesn't have visibility into your code in your R file\n-   clunky interface in Viewer pane\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}