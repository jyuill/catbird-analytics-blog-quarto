{
  "hash": "9f886a9ae56095b60327576e2b26a89d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with LLMs inside RStudio, part 1\"\nauthor: John Yuill\ndate: '2024-08-25'\ncategories: [analysis]\ndescription-meta: Exploring options for integrating LLMs into RStudio workflows.\ndraft: true\nimage:  dalle2-2024-08-26-llm-data-analysis_sm2.png\ntoc: true\ntoc-depth: 3\ntoc-location: left\ndate-modified: '2024-08-25'\nexecute:\n  echo: true\n  error: false\n  warning: false\n---\n\n\n\n\n## Exploration of Using Large Language Model Tools in R Studio\n\nPart 1 of exploring integration of LLM tools into R Studio for more efficient data analysis and faster speed to insights.\n\nLooking at some of the more well-known options, with relatively simple examples that give an idea of some, but by no means all, of the capabilities.\n\n1.  GitHub Copilot\n2.  chattr package\n3.  gptstudio package\n\n### First, some data\n\nHere's the data set we'll use throughout these examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(here('data','lmr-data.csv'), show_col_types = FALSE)\nglimpse(data, width=80)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,699\nColumns: 14\n$ lmr_id       <dbl> 17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 8…\n$ fy_qtr       <chr> \"FY2016Q1\", \"FY2016Q1\", \"FY2016Q1\", \"FY2016Q1\", \"FY2016Q1…\n$ cat_type     <chr> \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"Beer\", \"…\n$ category     <chr> \"Domestic - BC Beer\", \"Domestic - BC Beer\", \"Domestic - B…\n$ subcategory  <chr> \"Domestic - BC Commercial Beer\", \"Domestic - BC Micro Bre…\n$ netsales     <dbl> 173628845, 16988008, 32389411, 15818440, 169352, 2801993,…\n$ litres       <dbl> 52236010, 3927908, 9094263, 4378195, 25073, 862782, 38289…\n$ fyr          <dbl> 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 201…\n$ qtr          <chr> \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q1…\n$ end_qtr      <chr> \"06-30\", \"06-30\", \"06-30\", \"06-30\", \"06-30\", \"06-30\", \"06…\n$ end_qtr_dt   <date> 2015-06-30, 2015-06-30, 2015-06-30, 2015-06-30, 2015-06-…\n$ cyr          <dbl> 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ season       <chr> \"summer\", \"summer\", \"summer\", \"summer\", \"summer\", \"summer…\n$ start_qtr_dt <date> 2015-06-01, 2015-06-01, 2015-06-01, 2015-06-01, 2015-06-…\n```\n\n\n:::\n:::\n\n\n### Github Copilot\n\nCopilot is pretty much a must-have to help with your coding, imo. That is, of course, as long as you're willing to pay for it, since it **requires a Copilot subscription**.\n\nPosit has a [GitHub Copilot guide](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html) that gives you pretty much everything you need to get going.\n\n-   easy integratiion with RStudio via **Tools \\> Global Options**.\n-   real-time code suggestions -\\> way beyond traditional autocomplete offers.\n-   suggestions can even provide good practices for coding efficiency or other techniques that you may not be aware of.\n-   doesn't work well in 'Visual' mode, so you'll need to switch to 'Source' mode to get the most out of it.\n\n![](github-copilot-r-settings.png){fig-align=\"center\" width=\"400\"}\n\nMost folks are probably pretty familiar with how Copilot works, and there are lots of great resources, so I'll just throw in a simple R-specific example here.\n\n#### Prompt/response #1:\n\n-   After loading the data, the comment specifies what we want to do next.\n-   I started typing 'data\\_' and the greyed-out code was supplied by Copilot.\n-   To accept, I just hit 'tab' and execute.\n\n![](copilot_01.png)\n\nResulting in a serviceable chart:\n\n![](copilot_01_chart.png){width=\"300\"}\n\n#### Prompt/response #2:\n\n-   Going for some refinement: this time, I type in more detailed intentions, and Copilot provides all the greyed-out code, without me typing any code at all:\n\n![](copilot_02.png)\n\nResult looks good - although 'removal of x-axis ticks' got missed:\n\n![](copilot_02_chart.png){width=\"300\"}\n\n#### Prompt/response #3:\n\n-   One more set of minor refinements, these get incorporated in for a complete set of code to deliver the intended result\n\n![](copilot_03.png)\n\nResult:\n\n![](copilot_03_chart.png){width=\"300\"}\n\nA basic example, but shows the power of having this assistant at hand. Also highlights the way **these tools are particularly helpful to less-experienced programmers**: an experienced pro would be able to do all this as fast as Copilot but this really helps to level-up those who know what they want to do, but don't have all the code nuances at their fingertips.\n\n### chattr\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(chattr)\n```\n:::\n\n\n[chattr](https://mlverse.github.io/chattr/) is a package that enables interacting with LLMs from within the RStudio environment. This goes well beyond the code-focused content of Copilot.\n\nOnce you install and load the package, you can use the `chattr` function to interact with the LLM. This includes the ability to choose the model to use:\n\n**chattr_use()** function provides you with these options:\n\n![](chattr_models.png){width=\"350\"}\n\nOnce you've made a selection, you can test your connection and confirm which model you are using with **chattr_test()** function: *(I did this later on in my session, and I'm not sure what model was in play for some of the early examples here)*\n\n![](chattr_test.png){width=\"400\"}\n\nIf you don't have a successful test, best to go back to the documentation linked above for advice.\n\nThere are a couple of ways to interact with chattr:\n\n1.  use '**chattr(prompt = \"**\\<prompt here\\>**\")**' directly in a code block to generate code.\n\n2.  use **Addins \\> CHATTR \\> Open Chat** to open an app in the Viewer window, where you can interact through an interface.\n\n#### Prompt #1:\n\n-   enter **chattr(prompt = \"\\<prompt here\\>\")** in your code block - works from Visual mode in Quarto (unlike Copilot).\n-   move cursor to a separate line in the code block and run the code block to generate the code to answer your question.\n-   to get the actual results, comment out the original chattr prompt and run the new code provided.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#chattr(prompt = \"for the data dataframe I have in my session, how can i show the trend in netsales for cat_type 'Beer' by cyr from 2016 to 2022?\")\n\n# Load the required libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Filter the data for cat_type 'Beer' and years 2016 to 2022\ndata_beer <- data %>% \n  filter(cat_type == 'Beer' & cyr >= 2016 & cyr <= 2022)\n\n# Summarize the data to get total net sales by cyr\ndata_summarized <- data_beer %>% \n  group_by(cyr) %>% \n  summarise(total_netsales = sum(netsales))\n\n# Create the line chart\nggplot(data_summarized, aes(x = cyr, y = total_netsales)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/chattr_01-1.png){width=672}\n:::\n:::\n\n\n#### Prompt #2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#chattr(\"what is the highest year of total_netsales for Beer?\")\n\n\n# Load the required libraries\nlibrary(dplyr)\nlibrary(tidymodels)\n\n# Filter the data for cat_type 'Beer'\ndata_beer <- data %>% \n  filter(cat_type == 'Beer')\n\n# Summarize the data to get total net sales by cyr\ndata_summarized <- data_beer %>% \n  group_by(cyr) %>% \n  summarise(total_netsales = sum(netsales))\n\n# Find the year with the highest total_netsales\nhighest_year <- data_summarized %>% \n  filter(total_netsales == max(total_netsales)) %>% \n  pull(cyr)\n```\n:::\n\n\nNote that for this one, the value in stored in a variable in your session:\n\nthe highest year is: 2018\n\n#### Prompt #3: \n\nA little more complex...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchattr(prompt = \"what was the total percentage change in total net sales for Beer over the period 2016 to 2022, and what year had the largest year-over-year percentage change, either positive or negative?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nI'm sorry, but I can't provide the help you're looking for without the data. Could you please provide the data or the dataset's location?\n```\n\n\n:::\n:::\n\n\nThe code provided by the LLM is generally pretty impressive...but has **one error**:\n\n![](chattr_prompt_03_output_err.png){width=\"800\"}\n\nThis is pretty minor, an easy fix, and a fairly small price to pay for a LOT of free code. But does highlight that these tools aren't perfect.\n\nI used '**chattr_use()**' function mentioned above to ensure I was using **GPT 4** and check if that had better results, but produced exactly the same.\n\n#### Prompt #4:\n\nThis was an attempt to see if I could get some actual analysis fed back to me. This time (possibly because I upgraded to GPT 4), I got more text but it was only explanatory. However, the code has incorrect references to a 'date' field that doesn't exist - I commented out the whole section to avoid errors.\n\nPlus the text doesn't really add much here, and in fact got in the way, because I had more text to comment out in order to run the code (if the code actually worked ;).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#chattr(prompt = \"what are notable trends in netsales by cat_type in the data dataframe especially from 2016 to 2022?\")\n\n#To analyze the trends in `netsales` by `cat_type` from 2016 to 2022, we first need to filter the data for these years. Then, we can group the data by `cat_type` and year, and summarize the total `netsales` for each group. Finally, we can create a line plot to visualize the trends.\n\n#```R\n# Load required libraries\nlibrary(tidyverse)\nlibrary(lubridate)\n\n# Filter data for years 2016 to 2022\n# data_filtered <- data %>%\n#   filter(year(date) >= 2016 & year(date) <= 2022)\n# \n# # Group by cat_type and year, and summarize total netsales\n# data_summarized <- data_filtered %>%\n#   group_by(cat_type, year = year(date)) %>%\n#   summarize(total_netsales = sum(netsales, na.rm = TRUE))\n# \n# # Create line plot\n# ggplot(data_summarized, aes(x = year, y = total_netsales, color = cat_type)) +\n#   geom_line() +\n#   labs(x = \"Year\", y = \"Total Net Sales\", \n#        title = \"Trends in Net Sales by Category Type from 2016 to 2022\")\n#```\n\n#This code will give you a line plot showing the trends in `netsales` by `cat_type` from 2016 to 2022. Each `cat_type` will be represented by a different color. The x-axis represents the year, and the y-axis represents the total `netsales`.\n```\n:::\n\n\n#### Addin\n\n![](addin-chattr.png){width=\"100\"}\n\nYou can also launch chattr using **Addins \\> CHATTR \\>** '**Open Chat**' option. This will open an app in the Viewer window that you can interact with.\n\n#### Prompt 4 (via chat window):\n\nHere's the results using the same prompt as above. As you can see, very similar results, in this case with the prompt below and then the text + code provided.\n\n![](chattr_prompt_viewer.png){width=\"800\"}\n\nWith this approach, you can get more running conversation and can copy/paste code as needed into your R file. Maybe keeps things cleaner, although a) you have to jump back and forth, and b) you don't have a built-in reference for future (if needed).\n\n### gptstudio\n\nMAY MOVE THIS TO SEPARATE ARTICLE PART II\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gptstudio)\n```\n:::\n\n\n#### Addin\n\n![](gptstudio_addin.png){width=\"200\"}\n\n-   real-time prompting in Viewer pane with text responses\n-   provides code suggestions based on prompts that you can then copy/paste into your R file\n-   doesn't have visibility into your code in your R file\n-   clunky interface in Viewer pane\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}