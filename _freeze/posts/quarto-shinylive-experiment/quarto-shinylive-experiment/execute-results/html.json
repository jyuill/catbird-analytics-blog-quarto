{
  "hash": "bc5389317e880172acefb13855fa9621",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quarto Shinylive test\"\nformat: \n  html:\n    toc: true\n    code-fold: true\neditor: visual\nfilters:\n  - shinylive\nexecute: \n  echo: true\n  message: false\n  warning: false\n---\n\n\n\n\n## Quarto + Shinylive\n\nTaking Quarto docs to the next level by embedding live, fully interactive Shiny apps!\n\nExperiment inspired by Joe Cheng's presentation '[Running R-Shiny without a Server](https://www.youtube.com/watch?v=j1M6YyU2ZX8)' at posit::conf(2023). (20 min video)\n\nAdditional reference:\n\n-   To learn more about Shinylive see [github.com/posit-dev/r-shinylive](https://github.com/posit-dev/r-shinylive){.uri}.\n-   Try online version of Shinylive for R and see examples at [shinylive.io/r/examples/](https://shinylive.io/r/examples/)\n-   To learn more about Quarto see [quarto.org](https://quarto.org){.uri}.\n\n***Note:** this project set up using '.renv' which is good for reproducibility, but may cause complications for package management on different machines over time.*\n\n## Swiss dataset\n\nR built-in swiss dataset with fertility and socio-economic indicators by province, from 1888.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswiss <- swiss\nswiss$prov <- rownames(swiss)\nswiss_top <- swiss %>% arrange(-Fertility) %>% slice_head(n=10)\n# save with relative location for importing to shiny app below -> doesn't help\nwrite_csv(swiss_top, 'data/swiss_top.csv')\n```\n:::\n\n\n## Visualize\n\nTypical static plot produced with ggplot2: useful, but limited:\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nswiss_top %>% ggplot(aes(x=reorder(prov,Fertility), y=Fertility))+geom_col()+\n  geom_hline(yintercept=mean(swiss_top$Fertility), linetype='dashed', color='green')+\n  coord_flip()+\n  scale_y_continuous(expand=expansion(mult=c(0,0.02)))+\n  labs(title='Top 10 Swiss Provinces by Fertility', x=\"\", \n       subtitle = '(births per 1,000 women; dotted line = average)')+\n  theme_light()+\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_text(size=11))\n```\n\n::: {.cell-output-display}\n![from Swiss Fertility & Socioeconomic Indicators (1888); built-in R dataset.](quarto-shinylive-experiment_files/figure-html/fig-swiss-1.png){#fig-swiss fig-align='left' width=768}\n:::\n:::\n\n\n## Now with Shiny!\n\nFully interactive chart that leverages R shiny plus webR technology to display in browser...***without*** the need for **shiny server**!\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 700\n\n# load packages\nlibrary(shiny)\nlibrary(datasets)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(here)\n\n# get data - import saved file with relative location\n#swiss_top <- read_csv('data/swiss_top.csv') # failed attempt at reading data\nswiss <- datasets::swiss\nswiss$prov <- rownames(swiss)\nswiss <- swiss %>% arrange(-Fertility)\n\n# Define shiny ui\nui <- fluidPage(\n  # shiny UI components here\n  # Application title\n  titlePanel(\"Swiss Fertility Data by Province\"),\n  \n  # Sidebar layout with input and output definitions\n  sidebarLayout(\n    # Sidebar panel for inputs\n    sidebarPanel(\n      # Input: number of provinces to show (since 47 total)\n      numericInput(inputId='num_prov', \n                   label='No. of Provs. to show',\n                   value=10, min=1, max=50, step=1),\n      # Input: checkbox for the regions to plot - dynamic based on num_prov\n      uiOutput('dynamicCheckbox'),\n      p('note: 47 provinces in total')\n      ), # end sidebarPanel\n    \n    # Main panel for displaying outputs\n    mainPanel(\n      h3('Swiss Fertility'),\n      # Output: Column chart rendered with ggplot2\n      plotOutput(outputId = \"fert\", height=\"540px\")\n    ) # end mainPanel\n  )\n)\n\n# Define shiny server logic here  \nserver <- function(input, output, session) {\n  # shiny server code\n  output$dynamicCheckbox <- renderUI({\n     num_provinces <- input$num_prov\n     checkboxGroupInput(inputId=\"prov\", \"Select Provinces (desc order of fertility)\", \n                        choices = head(swiss$prov, num_provinces),\n                        select=swiss$prov)\n   })\n  # Reactive expression to generate the plot based on the inputs\n  output$fert <- renderPlot({\n    # filter provinces using checklist and num_prov selector\n    swiss_top <- swiss %>% filter(prov %in% input$prov)\n    # Generate ggplot2 column chart\n    swiss_top |> ggplot(aes(x=reorder(prov, Fertility), y=Fertility))+\n      geom_col()+\n      geom_hline(yintercept=mean(swiss_top$Fertility), \n                 linetype='dashed', color='green')+\n      coord_flip()+\n      scale_y_continuous(expand=expansion(mult=c(0,0.05)))+\n      labs(title='Swiss Provinces by Fertility (1888)', \n           subtitle = '(births per 1,000 women; dotted line = average)',\n           x=\"\")+\n      theme_light()+\n      theme(axis.ticks.y = element_blank(),\n            axis.text.y = element_text(size=12))\n   })\n}\n\n# create and launch shiny app\nshinyApp(ui = ui, server = server)\n```\n\nCode display doesn't work with the {shinylive-r} code block, so showing the skeleton with shown below. Key unique components:\n\n-   {shinyline-r}\n-   #\\| standalone: true\n-   #\\| viewerHeight: 600 - ensures app window is large enough\n-   the rest is standard shiny code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"Swiss Fertility Data by Province\"),\n  sidebarLayout(\n    sidebarPanel(\n      inputs\n    ),\n    mainPanel(\n      plotOutput(outputId = \"fert\")\n    )\n  )\n)\n\n# Define shiny server logic here  \nserver <- function(input, output, session) {\n  output$fert <- renderPlot({\n   })\n}\n\n# create and launch shiny app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n## But: Not So Fast...\n\nThere are some significant limitations.\n\n### Working with data\n\nBy far the most significant, as I'm as I'm concerned:\n\n-   **not able to load external data from outside the shiny app** (as far as I can tell)\n    -   no import csv (even local to the quarto project)\n    -   no database connection\n    -   no read googlesheet\n-   I can only use data generated within the app OR built-in R datasets\n    -   (*hence the use of the swiss dataset here)*\n\nI haven't been able to figure a way to import data to the app, despite attempting many approaches. So this is a **deal-breaker** for a lot applications - pretty much all of the use cases I would have.\n\n### Other limitations:\n\n-   single file app, so limited complexity\n-   hard to debug - no error messages or other clues when app fails\n    -   can use [shinylive.io](https://shinylive.io/r/examples/) for testing\n-   not all R packages available - but most, so shouldn't be major blocker\n-   slow loading time - a nuisance, but generally not unbearable\n-   restricted size: limited by format of quarto document\n\nNote that these limitations apply specifically to using Shinylive for embedding into Quarto documents. This is only one use case. Others include:\n\n-   [shinylive.io](https://shinylive.io/r/examples/): for prototyping, potentially sharing apps.\n-   [shiny app conversion](https://www.youtube.com/watch?v=B3Nggr9X4rY&t=803s): from regular shiny app that needs a server to serverless app that can be shared more easily.\n\n## Conclusion\n\nThis is **powerful technology** that currently has limited application - but will likely become even more valuable over time. Maybe **not ready for primetime**, but will have to **keep an eye on this**!\n",
    "supporting": [
      "quarto-shinylive-experiment_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}