---
title: "Working with LLM AI inside RStudio, part 1"
author: John Yuill
date: '2024-08-25'
categories: [analysis]
description-meta: Exploring options for integrating LLMs into RStudio workflows.
draft: true
image:  dalle2-2024-08-26-llm-data-analysis_sm2.png
toc: true
toc-depth: 3
toc-location: left
date-modified: '`r Sys.Date()`'
execute:
  echo: true
  error: false
  warning: false
---

```{r setup, include=FALSE}
#| echo: FALSE
#| warning: FALSE
library(tidyverse)
library(lubridate)
library(scales)
library(glue)
library(ggrepel)
library(readr) ## for easy conversion of $ characters to numeric
library(RMariaDB) ## best way to access MySQL from R
library(RColorBrewer)
library(here)
library(plotly)
library(gridExtra)
library(gganimate)

# set default theme
theme_set(theme_classic())

# additional settings as needed
# - may include: color palettes, source calls to functions, etc
```

## Large Language Model AI Tools in R Studio

Part 1 of exploring integration of LLM tools into R Studio for more efficient data analysis and faster speed to insights.

Looking at some of the more well-known options, with relatively simple examples that give an idea of some, but by no means all, of the capabilities.

1.  GitHub Copilot
2.  chattr package
3.  gptstudio package

### First, some data

Here's the data set we'll use throughout these examples:

```{r load_data}
data <- read_csv(here('data','lmr-data.csv'), show_col_types = FALSE)
glimpse(data, width=80)
```

### Github Copilot

Copilot is pretty much a must-have to help with your coding, imo. That is, of course, as long as you're willing to pay for it, since it **requires a Copilot subscription**.

Posit has a [GitHub Copilot guide](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html) that gives you pretty much everything you need to get going.

-   easy integratiion with RStudio via **Tools \> Global Options**.
-   real-time code suggestions -\> way beyond traditional autocomplete offers.
-   suggestions can even provide good practices for coding efficiency or other techniques that you may not be aware of.
-   doesn't work well in 'Visual' mode, so you'll need to switch to 'Source' mode to get the most out of it.

![](github-copilot-r-settings.png){fig-align="center" width="400"}

Most folks are probably pretty familiar with how Copilot works, and there are lots of great resources, so I'll just throw in a simple R-specific example here.

#### Prompt/response #1:

-   After loading the data, the comment specifies what we want to do next.
-   I started typing 'data\_' and the greyed-out code was supplied by Copilot.
-   To accept, I just hit 'tab' and execute.

![](copilot_01.png)

Resulting in a serviceable chart:

![](copilot_01_chart.png){width="300"}

#### Prompt/response #2:

-   Going for some refinement: this time, I type in more detailed intentions, and Copilot provides all the greyed-out code, without me typing any code at all:

![](copilot_02.png)

Result looks good - although 'removal of x-axis ticks' got missed:

![](copilot_02_chart.png){width="300"}

#### Prompt/response #3:

-   One more set of minor refinements, these get incorporated in for a complete set of code to deliver the intended result

![](copilot_03.png)

Result:

![](copilot_03_chart.png){width="300"}

A basic example, but shows the power of having this assistant at hand. Also highlights the way **these tools are particularly helpful to less-experienced programmers**: an experienced pro would be able to do all this as fast as Copilot but this really helps to level-up those who know what they want to do, but don't have all the code nuances at their fingertips.

### chattr

```{r}
library(chattr)
```

[chattr](https://mlverse.github.io/chattr/) is a package that enables interacting with LLMs from within the RStudio environment. The intention is to go well beyond the code-focused content of Copilot.

Once you install and load the package, you can use the `chattr` function to interact with the LLM. The `chattr_use` function provides the ability to choose the model to use:

![](chattr_models.png){width="350"}

Once you've made a selection, you can test your connection and confirm which model you are using with `chattr_test` function: *(I did this later on in my session, and I'm not sure what model was in play for some of the early examples here)*

![](chattr_test.png){width="400"}

If you don't have a successful test, best to go to the [chattr Github documentation](https://mlverse.github.io/chattr/) for advice.

There are a couple of ways to interact with chattr:

1.  use '**chattr(prompt = "**\<prompt here\>**")**' inline, directly in a code block to generate code.

2.  use **Addins \> CHATTR \> Open Chat** to open an app in the Viewer window, where you can interact through an interface.

#### Inline chattr

-   enter **chattr(prompt = "\<prompt here\>")** in your code block - works from Visual mode in Quarto (unlike Copilot).
-   move cursor to a separate line in the code block and run the code block to generate the code to answer your question.
-   to get the actual results, comment out the original chattr prompt and run the new code provided.

##### Prompt #1:

A basic question along the lines of what we were doing with Copilot (maybe slightly more advanced). Produces basic chart that answers the question. (prompt in commented out in order to show the results from the R code that was provided)

```{r chattr_01}
#chattr(prompt = "for the data dataframe I have in my session, how can i show the trend in netsales for cat_type 'Beer' by cyr from 2016 to 2022?")

# Load the required libraries
library(dplyr)
library(ggplot2)

# Filter the data for cat_type 'Beer' and years 2016 to 2022
data_beer <- data %>% 
  filter(cat_type == 'Beer' & cyr >= 2016 & cyr <= 2022)

# Summarize the data to get total net sales by cyr
data_summarized <- data_beer %>% 
  group_by(cyr) %>% 
  summarise(total_netsales = sum(netsales))

# Create the line chart
ggplot(data_summarized, aes(x = cyr, y = total_netsales)) +
  geom_line()
```

##### Prompt #2:

```{r chattr_02}
#chattr("what is the highest year of total_netsales for Beer?")


# Load the required libraries
library(dplyr)
library(tidymodels)

# Filter the data for cat_type 'Beer'
data_beer <- data %>% 
  filter(cat_type == 'Beer')

# Summarize the data to get total net sales by cyr
data_summarized <- data_beer %>% 
  group_by(cyr) %>% 
  summarise(total_netsales = sum(netsales))

# Find the year with the highest total_netsales
highest_year <- data_summarized %>% 
  filter(total_netsales == max(total_netsales)) %>% 
  pull(cyr)


```

Note that for this one, the value in stored in a variable in your session:

```{r}
print(highest_year)
```

##### Prompt #3:

A little more complex...(you need to scroll the window to see the full question)

```{r chattr_03}
# chattr(prompt = "what was the total percentage change in total net sales for Beer over the period 2016 to 2022, and what year had the largest year-over-year percentage change, either positive or negative?")
```

The code provided by the LLM is generally pretty impressive...but has **one error**:

![](chattr_prompt_03_output_err.png){width="800"}

This is pretty minor, an easy fix, and a fairly small price to pay for a LOT of free code. But does highlight that **these tools aren't perfect** (surprise, surprise!).

I used '**chattr_use()**' function mentioned above to ensure I was using **GPT 4** and check if that had better results, but produced exactly the same.

##### Prompt #4:

This was an attempt to see if I could get some actual analysis fed back to me. This time (possibly because I upgraded to GPT 4), I got more text but it was only explanatory. However, the code has incorrect references to a 'date' field that doesn't exist - I commented out the whole section to avoid errors.

Plus the text doesn't really add much here, and in fact got in the way, because I had more text to comment out in order to run the code (if the code actually worked ;).

```{r}
#chattr(prompt = "what are notable trends in netsales by cat_type in the data dataframe especially from 2016 to 2022?")

#To analyze the trends in `netsales` by `cat_type` from 2016 to 2022, we first need to filter the data for these years. Then, we can group the data by `cat_type` and year, and summarize the total `netsales` for each group. Finally, we can create a line plot to visualize the trends.

#```R
# Load required libraries
library(tidyverse)
library(lubridate)

# Filter data for years 2016 to 2022
# data_filtered <- data %>%
#   filter(year(date) >= 2016 & year(date) <= 2022)
# 
# # Group by cat_type and year, and summarize total netsales
# data_summarized <- data_filtered %>%
#   group_by(cat_type, year = year(date)) %>%
#   summarize(total_netsales = sum(netsales, na.rm = TRUE))
# 
# # Create line plot
# ggplot(data_summarized, aes(x = year, y = total_netsales, color = cat_type)) +
#   geom_line() +
#   labs(x = "Year", y = "Total Net Sales", 
#        title = "Trends in Net Sales by Category Type from 2016 to 2022")
#```

#This code will give you a line plot showing the trends in `netsales` by `cat_type` from 2016 to 2022. Each `cat_type` will be represented by a different color. The x-axis represents the year, and the y-axis represents the total `netsales`.


```

#### Addin

![](addin-chattr.png){width="100"}

The main selling point for chattr is intended to be the **interactive app accessed via the Viewer window**. You can access this through **Addins \> CHATTR \>** '**Open Chat**' option.

##### Prompt 4 (via chat window):

Here's the results using the same prompt as above. As you can see, very similar results, in this case with the prompt below and then the text + code provided.

![](chattr_prompt_viewer.png){width="800"}

With this approach, you can get more running conversation and can copy/paste code as needed into your R file. Maybe keeps things cleaner, although a) you have to jump back and forth, and b) you don't have a built-in reference for future (if needed).

### gptstudio

MAY MOVE THIS TO SEPARATE ARTICLE PART II

```{r}
library(gptstudio)
```

#### Addin

![](gptstudio_addin.png){width="200"}

-   real-time prompting in Viewer pane with text responses
-   provides code suggestions based on prompts that you can then copy/paste into your R file
-   doesn't have visibility into your code in your R file
-   clunky interface in Viewer pane

```{r}

```
